# a build with no CI
trigger: none

jobs:
- job: NetCore_Web_Kubernetes
  pool:
    name: Hosted Ubuntu 1604

  variables:
    NamePrefix_local: $(NamePrefix)
    SubscriptionId_local: $(SubscriptionId)
    ConnectedServiceName_local: $(ConnectedServiceName)
    eventing_local: $(eventing)

  steps:
  - task: Docker@0
    displayName: 'Build a container image'
    inputs:
      imageName: 'acrcontosotravel${{ variables.NamePrefix_local }}.azurecr.io/contoso-travel-service:$(Build.BuildId)'
      includeLatestTag: true
      workingDirectory: '$(build.sourcesDirectory)/functions'
      buildArguments: 'eventing=${{ variables.eventing_local }}'
  
  - task: Docker@0
    displayName: 'Push a container image'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      azureContainerRegistry: '{"loginServer":"acrcontosotravel${{ variables.NamePrefix_local }}.azurecr.io", "id":"/subscriptions/${{ variables.SubscriptionId_local }}/resourceGroups/rg-${{ variables.NamePrefix_local }}/providers/Microsoft.ContainerRegistry/registries/acrContosoTravel${{ variables.NamePrefix_local }}"}'
      action: 'Push an image'
      includeLatestTag: true
      imageName: 'acrcontosotravel${{ variables.NamePrefix_local }}.azurecr.io/contoso-travel-service:$(Build.BuildId)'
      workingDirectory: '$(build.sourcesDirectory)/functions'
  - task: AzureCLI@1
    displayName: 'Azure CLI - Set Variables for Kubernetes'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      scriptLocation: inlineScript
      inlineScript: |
        appInsightsKey=$(az resource show --resource-group $ResourceGroupName --subscription $SubscriptionId_local --resource-type Microsoft.Insights/components --name $AppInsightsName --query "properties.InstrumentationKey"  --out tsv )
        dnsZone=$(az aks show --resource-group $ResourceGroupName  --subscription $SubscriptionId_local --name $AKSName --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName  --out tsv )
        serviceConnStr=$(az keyvault secret show --subscription $SubscriptionId_local --vault-name $KVName --name "ContosoTravel--EventingConnectionString" --query value --out tsv | sed -e 's/;EntityPath.+//' )
        echo "##vso[task.setvariable variable=appInsightsKey;isOutput=true]$appInsightsKey"
        echo "##vso[task.setvariable variable=dnsZone;isOutput=true]$dnsZone"
        echo "##vso[task.setvariable variable=serviceConnectionString;isOutput=true]$serviceConnStr"
    env:
      NamePrefix_local: $(NamePrefix_local)
      SubscriptionId_local: $(SubscriptionId_local)
      ResourceGroupName: rg-${{ variables.NamePrefix_local }}
      AppInsightsName: ${{ variables.NamePrefix_local }}appInsightContosoTravel
      AKSName: aks-ContosoTravel-${{ variables.NamePrefix_local }}
      KVName: kv${{ variables.NamePrefix_local }}
    name: 'azureValues'

  - task: replacetokens@3
    displayName: 'Replace tokens in serviceDeploy.yaml'
    inputs:
      targetFiles: serviceDeploy.yaml
  
  - task: AzureCLI@1
    displayName: 'Azure CLI - Deploy Service to Kubernetes'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      scriptLocation: inlineScript
      inlineScript: |
         az aks get-credentials --subscription $SubscriptionId_local --resource-group $ResourceGroupName --name $AKSName --overwrite-existing
         kubectl apply -f serviceDeploy.yaml
         kubectl set image deployments/contosotravel-service $ImageExpr
    env:
      NamePrefix_local: $(NamePrefix_local)
      SubscriptionId_local: $(SubscriptionId_local)
      ResourceGroupName: rg-${{ variables.NamePrefix_local }}
      AKSName: aks-ContosoTravel-${{ variables.NamePrefix_local }}
      ImageExpr: contosotravel-service=acrContosoTravel${{ variables.NamePrefix_local }}.azurecr.io/contoso-travel-service:$(Build.BuildId)

  - task: AzureCLI@1
    displayName: 'Azure CLI - Running configuration.ps1 and Deploy'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      scriptLocation: inlineScript
      inlineScript: |
        sub=(az account show --query id --output tsv)
        url=(az keyvault secret show --vault-name "kv${{ variables.namePrefix_local }}" --name "ContosoTravel--ServiceFQDN" --query value --output tsv)
        topicId=(az eventgrid topic list --resource-group rg-{{ variables.namePrefix_local }} --subscription $sub --query [].id --output tsv)
        az eventgrid event-subscription create --name {{ variables.namePrefix_local }}PurchaseItinerarySub --source-resource-id $topicId --endpoint $url
      workingDirectory: $(Build.sourcesDirectory)      
    condition: and(always(), eq(variables['eventing'], 'eventgrid'))    